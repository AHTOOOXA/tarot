version: "3"

services:
  app:
    image: "tarot-vue"
    build:
        context: ./frontend
        dockerfile: Dockerfile
    working_dir: "/home/node/app"
    volumes:
      # - /var/app/medsync/:/home/node/app/dist

      - ./frontend:/home/node/app
      - /home/node/app/node_modules

    command: ["yarn", "dev", "--host"]
    ports:
      - "5173:5173"
    env_file:
      - ".env"
    stop_signal: SIGINT

  bot:
    image: "tarot-bot"
    stop_signal: SIGINT
    build:
      context: ./backend
      dockerfile: ./bot.Dockerfile
    volumes:
      - ./backend/src:/src/
    restart: always
    env_file:
      - ".env"
    command: ["/venv/bin/python", "-u", "hot_reload_bot.py"]

  pg_database:
    image: postgres:13-alpine
    ports:
      - "5452:5432" # Change if you like! 5439 is external to container
    restart: always
    volumes:
      - pgdata_tarot:/var/lib/postgresql/data
    # command: "postgres -c max_connections=150 -c shared_buffers=512MB -c effective_cache_size=1536MB -c maintenance_work_mem=128MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200 -c work_mem=3495kB -c min_wal_size=1GB -c max_wal_size=4GB -c max_worker_processes=2 -c max_parallel_workers_per_gather=1 -c max_parallel_workers=2 -c max_parallel_maintenance_workers=1"
    env_file:
      - '.env'
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  webhook:
    image: "tarot-webhook"
    stop_signal: SIGINT
    build:
      context: ./backend
      dockerfile: ./web.Dockerfile
    ports:
      - "3779:8000"
    volumes:
      - ./backend/src:/src
    restart: always
    env_file:
      - ".env"
    command: ["/venv/bin/uvicorn", "app.webhook.app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  redis_cache:
    image: redis:6.2-alpine
    restart: always
    command: redis-server --port $REDIS_PORT --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
    env_file:
      - ".env"
    volumes:
      - cache_tarot:/data

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
      - webhook
    restart: always

  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run --token ${CLOUDFLARED_TOKEN}
    restart: unless-stopped

  # zrok:
  #   image: openziti/zrok
  #   restart: unless-stopped
  #   user: "${UID:-1000}"
  #   volumes:
  #     - ${HOME:-/home/user}/.zrok:/.zrok
  #   environment:
  #     - PFXLOG_NO_JSON=true
  #   command: share reserved "anton" --headless
  #   depends_on:
  #     - nginx

  # ngrok:
  #   image: ngrok/ngrok:latest
  #   restart: unless-stopped
  #   environment:
  #     - NGROK_CONFIG=/etc/ngrok.yml
  #   volumes:
  #     - ./ngrok.yml:/etc/ngrok.yml
  #   expose:
  #     - 443

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - ".env"
    volumes:
      - rabbitmq_data_tarot:/var/lib/rabbitmq

volumes:
  pgdata_tarot: { }
  cache_tarot: { }
  rabbitmq_data_tarot: { }  # Add this line
